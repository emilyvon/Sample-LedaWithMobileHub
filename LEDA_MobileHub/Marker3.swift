//
//  Marker3.swift
//  ProjectName
//
//  Created by Emily Fung on 2/11/16.
//  Copyright (c) 2016 Appliquette. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Marker3 : NSObject {

    //// Drawing Methods

    public class func drawCanvas1(outerFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 165), markerPos: CGFloat = 0, resultTxt: String = "100") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 44/255, green: 171/255, blue: 213/255, alpha: 1.000)

        //// Frames
        let markerFrame = CGRect(x: markerPos, y: 0, width: 54, height: 165)


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: markerFrame.minX + 54, y: markerFrame.minY + 27))
        ovalPath.addCurve(to: CGPoint(x: markerFrame.minX + 27, y: markerFrame.minY + 68), controlPoint1: CGPoint(x: markerFrame.minX + 54, y: markerFrame.minY + 41.91), controlPoint2: CGPoint(x: markerFrame.minX + 27, y: markerFrame.minY + 68))
        ovalPath.addCurve(to: CGPoint(x: markerFrame.minX, y: markerFrame.minY + 27), controlPoint1: CGPoint(x: markerFrame.minX + 27, y: markerFrame.minY + 68), controlPoint2: CGPoint(x: markerFrame.minX, y: markerFrame.minY + 41.91))
        ovalPath.addCurve(to: CGPoint(x: markerFrame.minX + 27, y: markerFrame.minY), controlPoint1: CGPoint(x: markerFrame.minX, y: markerFrame.minY + 12.09), controlPoint2: CGPoint(x: markerFrame.minX + 12.09, y: markerFrame.minY))
        ovalPath.addCurve(to: CGPoint(x: markerFrame.minX + 54, y: markerFrame.minY + 27), controlPoint1: CGPoint(x: markerFrame.minX + 41.91, y: markerFrame.minY), controlPoint2: CGPoint(x: markerFrame.minX + 54, y: markerFrame.minY + 12.09))
        ovalPath.close()
        color.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: markerFrame.minX + 25, y: markerFrame.minY + 66, width: 4, height: 99))
        color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: markerFrame.minX + 2, y: markerFrame.minY + 19, width: 35, height: 21)
        let textStyle = NSParagraphStyle.default.mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Bold", size: UIFont.labelFontSize + CGFloat(4))!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: resultTxt).boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: textRect);
        NSString(string: resultTxt).draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context!.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: markerFrame.minX + 28, y: markerFrame.minY + 13, width: 27, height: 21)
        let text2TextContent = NSString(string: "%")
        let text2Style = NSParagraphStyle.default.mutableCopy() as! NSMutableParagraphStyle
        text2Style.alignment = .center

        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Bold", size: UIFont.smallSystemFontSize + CGFloat(4))!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: text2Rect);
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context!.restoreGState()
    }

}
